<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util-3.0.xsd">
		   	
    <!-- BCM Configuration -->
    <!-- bcmAppName, String; appName as defined at the BCM Web Application -->
	<!-- bcmUsername - String; optional username for authenticating into BCM -->
	<!-- bcmPassword - String; optional password for authenticating into BCM. If bcmUsername is set, bcmPassword should be set too -->
	<!-- bcmAppName, String; appName as defined at the BCM Web Application -->
	<bean id="bcmAppName" class="java.lang.String">
		<constructor-arg value="smartIPM"/>
	</bean> 
	<bean id="bcmUsername" class="java.lang.String">
		<constructor-arg value="fispaceUser"/>
	</bean>
	<bean id="bcmPassword" class="java.lang.String">
		<constructor-arg value="fispaceUser"/>
	</bean>
	
	<!-- Business Process Template Id -->
	<!-- The configuration specified in this file will only apply to messages whose business process is an instantiation of the following id-->
	<bean id="businessProcessTemplateId" class="java.lang.Integer">
	    <constructor-arg value="3"/>
	</bean>			
	   

	<!-- Start Application Wiring -->
	<!-- This specifies the application behavior: which queues to listen to, how to route POJOs, what services to expose, how to marshal/unmarshal data, etc. -->
	
			
	<!-- BCM to CSB -->
	
	
	<!-- bcmSyncServiceHandlers: Map<String, IRequestXmlHandler>; string is the serviceId, used as part of the service path http(s)://<server>:<port>/<webApp>/callSyncService/{serviceId} -->
	<!--    IRequestXmlHandler instances will usually be SendRequestToCSBXmlHandler -->
	<util:map id="bcmSyncServiceHandlers">
	    <!-- Use the following for testing the bcm->csb request/response mechanism, this loops back through the csb->bcm request/response and can be tested with a POSTer -->
	    <!-- 
	    <entry key="loopback">
	        <bean class="com.ibm.cbbridge.impl.b2c.SendRequestToCSBXmlHandler">
				<property name="componentName" value = "eu.fispace.bcm.greenhouse.loopback"/>
	            <property name="respondingComponentName" value = "eu.fispace.bcm.greenhouse"/>
				<property name="responseMarshaller">
					<bean class="org.springframework.oxm.castor.CastorMarshaller"> 							
						<property name="mappingLocation" value="/WEB-INF/app/B2BAdviceEntityInfo_Mapping.xml" />
					</bean>			
				</property>
				<property name="requestUnmarshaller">
					<bean class="org.springframework.oxm.castor.CastorMarshaller"> 							
						<property name="mappingLocation" value="/WEB-INF/app/B2BServiceRequestAdviceEntityInfo_Mapping.xml" />
					</bean>			
				</property>					            
	        </bean>
	    </entry>
	     -->
	</util:map>
		
	
	<!-- CSB to BCM -->

	<!--  marshaller for creating a new shipment event-->
	<bean id="createMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"> 							
		<property name="mappingLocation" value="CreateWeatherCondition_Mapping.xml" />
	</bean>
	
	<!-- csbQueueMessagePojoHandlerConfiguration: Map<Class, IPojoHandler>; class is the POJO's class for which the handler should be used -->
	<!--    IPojoHandler instances will usually be: ChainPojoHandler, CreateBEPojoHandler, PassEventToBCMPojoHandler -->
	<util:map id="csbQueueMessagePojoHandlerConfiguration"  key-type="java.lang.Class">
		<entry key="eu.fispace.api.ag.ProvideWeatherConditionsRequestMessage">
			<bean class="com.ibm.cbbridge.impl.ChainPojoHandler">
				<property name="handlers">
					<list>
					    <bean class="com.ibm.cbbridge.impl.c2b.CreateBEPojoHandler">
                            <property name="marshaller" ref="createMarshaller"/>
                            <property name="beName" value="WeatherCondition"/>
                        </bean> 
						<bean class="com.ibm.cbbridge.impl.c2b.PassEventToBCMPojoHandler">
							<property name="eventName" value="ProvideWeatherConditionsRequestMessage"/>
							<property name="marshaller" ref="jaxb2Marshaller"/>							
						</bean>
					</list>
				</property>
			</bean>
		</entry>
		<entry key="eu.limetri.ygg.api.ResourceAvailableNotification">
			<bean class="com.ibm.cbbridge.impl.c2b.PassEventToBCMPojoHandler">
				<property name="eventName" value="resourceAvailableNotification"/>
				<property name="marshaller" ref="jaxb2Marshaller"/>							
			</bean>		    
		</entry>
	</util:map>
	
	<!-- csbRequestPojoHandlerConfiguration: Map<Class, IRequestPojoHandler>; class is the POJO's class for which the handler should be used -->
	<!--    IRequestPojoHandler instances will usually be a GetBEInfoPojoHandler -->
	<!-- Instances of ICSBPojoRetriever: these will usually be CSBQueueReceiver instances -->
	<util:map id="csbRequestPojoHandlerConfiguration"  key-type="java.lang.Class">	
	</util:map>
	
	<!--  Define CSB Request Listeners -->
	<!--  Instances of ICSBRequestListener: these will usually be AppCSBRequestListener instance  -->
	<bean class="com.ibm.cbbridge.app.impl.AppCSBRequestListener">
		<property name="componentName" value = "eu.fispace.bcm.wc"/>
	</bean>
	<!-- End Application Wiring -->

</beans>
